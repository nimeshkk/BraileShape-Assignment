//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace brailetest1.brailleservice {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="brailleservice.WebService1Soap")]
    public interface WebService1Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateCircumference", ReplyAction="*")]
        double CalculateCircumference(double radius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateCircumference", ReplyAction="*")]
        System.Threading.Tasks.Task<double> CalculateCircumferenceAsync(double radius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CircumferenceInk", ReplyAction="*")]
        double CircumferenceInk(double ink);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CircumferenceInk", ReplyAction="*")]
        System.Threading.Tasks.Task<double> CircumferenceInkAsync(double ink);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateTrianglePerimeter", ReplyAction="*")]
        double CalculateTrianglePerimeter(double side1, double side2, double side3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateTrianglePerimeter", ReplyAction="*")]
        System.Threading.Tasks.Task<double> CalculateTrianglePerimeterAsync(double side1, double side2, double side3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateRectanglePerimeter", ReplyAction="*")]
        double CalculateRectanglePerimeter(double length, double width);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateRectanglePerimeter", ReplyAction="*")]
        System.Threading.Tasks.Task<double> CalculateRectanglePerimeterAsync(double length, double width);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebService1SoapChannel : brailetest1.brailleservice.WebService1Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebService1SoapClient : System.ServiceModel.ClientBase<brailetest1.brailleservice.WebService1Soap>, brailetest1.brailleservice.WebService1Soap {
        
        public WebService1SoapClient() {
        }
        
        public WebService1SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double CalculateCircumference(double radius) {
            return base.Channel.CalculateCircumference(radius);
        }
        
        public System.Threading.Tasks.Task<double> CalculateCircumferenceAsync(double radius) {
            return base.Channel.CalculateCircumferenceAsync(radius);
        }
        
        public double CircumferenceInk(double ink) {
            return base.Channel.CircumferenceInk(ink);
        }
        
        public System.Threading.Tasks.Task<double> CircumferenceInkAsync(double ink) {
            return base.Channel.CircumferenceInkAsync(ink);
        }
        
        public double CalculateTrianglePerimeter(double side1, double side2, double side3) {
            return base.Channel.CalculateTrianglePerimeter(side1, side2, side3);
        }
        
        public System.Threading.Tasks.Task<double> CalculateTrianglePerimeterAsync(double side1, double side2, double side3) {
            return base.Channel.CalculateTrianglePerimeterAsync(side1, side2, side3);
        }
        
        public double CalculateRectanglePerimeter(double length, double width) {
            return base.Channel.CalculateRectanglePerimeter(length, width);
        }
        
        public System.Threading.Tasks.Task<double> CalculateRectanglePerimeterAsync(double length, double width) {
            return base.Channel.CalculateRectanglePerimeterAsync(length, width);
        }
    }
}
